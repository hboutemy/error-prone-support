package tech.picnic.errorprone.refastertemplates;

/** The Refaster templates for the migration of the RxJava Maybe type to Reactor */
public final class RxJavaMaybeToReactorTemplates {

  private RxJavaMaybeToReactorTemplates() {}

  // XXX: public static Maybe amb(Iterable)
  // XXX: public static Maybe ambArray(MaybeSource[])
  // XXX: public static Flowable concat(Iterable)
  // XXX: public static Flowable concat(MaybeSource,MaybeSource)
  // XXX: public static Flowable concat(MaybeSource,MaybeSource,MaybeSource)
  // XXX: public static Flowable concat(MaybeSource,MaybeSource,MaybeSource,MaybeSource)
  // XXX: public static Flowable concat(Publisher)
  // XXX: public static Flowable concat(Publisher,int)
  // XXX: public static Flowable concatArray(MaybeSource[])
  // XXX: public static Flowable concatArrayDelayError(MaybeSource[])
  // XXX: public static Flowable concatArrayEager(MaybeSource[])
  // XXX: public static Flowable concatDelayError(Iterable)
  // XXX: public static Flowable concatDelayError(Publisher)
  // XXX: public static Flowable concatEager(Iterable)
  // XXX: public static Flowable concatEager(Publisher)
  // XXX: public static Maybe create(MaybeOnSubscribe)
  // XXX: public static Maybe defer(Callable)
  // XXX: public static Maybe empty()
  // XXX: public static Maybe error(Callable)
  // XXX: public static Maybe error(Throwable)
  // XXX: public static Maybe fromAction(Action)
  // XXX: public static Maybe fromCallable(Callable)
  // XXX: public static Maybe fromCompletable(CompletableSource)
  // XXX: public static Maybe fromFuture(Future)
  // XXX: public static Maybe fromFuture(Future,long,TimeUnit)
  // XXX: public static Maybe fromRunnable(Runnable)
  // XXX: public static Maybe fromSingle(SingleSource)
  // XXX: public static Maybe just(Object)
  // XXX: public static Flowable merge(Iterable)
  // XXX: public static Maybe merge(MaybeSource)
  // XXX: public static Flowable merge(MaybeSource,MaybeSource)
  // XXX: public static Flowable merge(MaybeSource,MaybeSource,MaybeSource)
  // XXX: public static Flowable merge(MaybeSource,MaybeSource,MaybeSource,MaybeSource)
  // XXX: public static Flowable merge(Publisher)
  // XXX: public static Flowable merge(Publisher,int)
  // XXX: public static Flowable mergeArray(MaybeSource[])
  // XXX: public static Flowable mergeArrayDelayError(MaybeSource[])
  // XXX: public static Flowable mergeDelayError(Iterable)
  // XXX: public static Flowable mergeDelayError(MaybeSource,MaybeSource)
  // XXX: public static Flowable mergeDelayError(MaybeSource,MaybeSource,MaybeSource)
  // XXX: public static Flowable mergeDelayError(MaybeSource,MaybeSource,MaybeSource,MaybeSource)
  // XXX: public static Flowable mergeDelayError(Publisher)
  // XXX: public static Flowable mergeDelayError(Publisher,int)
  // XXX: public static Maybe never()
  // XXX: public static Single sequenceEqual(MaybeSource,MaybeSource)
  // XXX: public static Single sequenceEqual(MaybeSource,MaybeSource,BiPredicate)
  // XXX: public static Maybe timer(long,TimeUnit)
  // XXX: public static Maybe timer(long,TimeUnit,Scheduler)
  // XXX: public static Maybe unsafeCreate(MaybeSource)
  // XXX: public static Maybe using(Callable,Function,Consumer)
  // XXX: public static Maybe using(Callable,Function,Consumer,boolean)
  // XXX: public static Maybe wrap(MaybeSource)
  // XXX: public static Maybe zip(Iterable,Function)
  // XXX: public static Maybe zip(MaybeSource,MaybeSource,BiFunction)
  // XXX: public static Maybe zip(MaybeSource,MaybeSource,MaybeSource,Function3)
  // XXX: public static Maybe zip(MaybeSource,MaybeSource,MaybeSource,MaybeSource,Function4)
  // XXX: public static Maybe
  // zip(MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,Function5)
  // XXX: public static Maybe
  // zip(MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,Function6)
  // XXX: public static Maybe
  // zip(MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,Function7)
  // XXX: public static Maybe
  // zip(MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,Function8)
  // XXX: public static Maybe
  // zip(MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,MaybeSource,Function9)
  // XXX: public static Maybe zipArray(Function,MaybeSource[])
  // XXX: public final Maybe ambWith(MaybeSource)
  // XXX: public final Object as(MaybeConverter)
  // XXX: public final Object blockingGet()
  // XXX: public final Object blockingGet(Object)
  // XXX: public final Maybe cache()
  // XXX: public final Maybe cast(Class)
  // XXX: public final Maybe compose(MaybeTransformer)
  // XXX: public final Maybe concatMap(Function)
  // XXX: public final Flowable concatWith(MaybeSource)
  // XXX: public final Single contains(Object)
  // XXX: public final Single count()
  // XXX: public final Maybe defaultIfEmpty(Object)
  // XXX: public final Maybe delay(long,TimeUnit)
  // XXX: public final Maybe delay(long,TimeUnit,Scheduler)
  // XXX: public final Maybe delay(Publisher)
  // XXX: public final Maybe delaySubscription(long,TimeUnit)
  // XXX: public final Maybe delaySubscription(long,TimeUnit,Scheduler)
  // XXX: public final Maybe delaySubscription(Publisher)
  // XXX: public final Maybe doAfterSuccess(Consumer)
  // XXX: public final Maybe doAfterTerminate(Action)
  // XXX: public final Maybe doFinally(Action)
  // XXX: public final Maybe doOnComplete(Action)
  // XXX: public final Maybe doOnDispose(Action)
  // XXX: public final Maybe doOnError(Consumer)
  // XXX: public final Maybe doOnEvent(BiConsumer)
  // XXX: public final Maybe doOnSubscribe(Consumer)
  // XXX: public final Maybe doOnSuccess(Consumer)
  // XXX: public final Maybe doOnTerminate(Action)
  // XXX: public final Maybe filter(Predicate)
  // XXX: public final Maybe flatMap(Function)
  // XXX: public final Maybe flatMap(Function,BiFunction)
  // XXX: public final Maybe flatMap(Function,Function,Callable)
  // XXX: public final Completable flatMapCompletable(Function)
  // XXX: public final Observable flatMapObservable(Function)
  // XXX: public final Flowable flatMapPublisher(Function)
  // XXX: public final Single flatMapSingle(Function)
  // XXX: public final Maybe flatMapSingleElement(Function)
  // XXX: public final Flowable flattenAsFlowable(Function)
  // XXX: public final Observable flattenAsObservable(Function)
  // XXX: public final Maybe hide()
  // XXX: public final Completable ignoreElement()
  // XXX: public final Single isEmpty()
  // XXX: public final Maybe lift(MaybeOperator)
  // XXX: public final Maybe map(Function)
  // XXX: public final Single materialize()
  // XXX: public final Flowable mergeWith(MaybeSource)
  // XXX: public final Maybe observeOn(Scheduler)
  // XXX: public final Maybe ofType(Class)
  // XXX: public final Maybe onErrorComplete()
  // XXX: public final Maybe onErrorComplete(Predicate)
  // XXX: public final Maybe onErrorResumeNext(Function)
  // XXX: public final Maybe onErrorResumeNext(MaybeSource)
  // XXX: public final Maybe onErrorReturn(Function)
  // XXX: public final Maybe onErrorReturnItem(Object)
  // XXX: public final Maybe onExceptionResumeNext(MaybeSource)
  // XXX: public final Maybe onTerminateDetach()
  // XXX: public final Flowable repeat()
  // XXX: public final Flowable repeat(long)
  // XXX: public final Flowable repeatUntil(BooleanSupplier)
  // XXX: public final Flowable repeatWhen(Function)
  // XXX: public final Maybe retry()
  // XXX: public final Maybe retry(BiPredicate)
  // XXX: public final Maybe retry(long)
  // XXX: public final Maybe retry(long,Predicate)
  // XXX: public final Maybe retry(Predicate)
  // XXX: public final Maybe retryUntil(BooleanSupplier)
  // XXX: public final Maybe retryWhen(Function)
  // XXX: public final Disposable subscribe()
  // XXX: public final Disposable subscribe(Consumer)
  // XXX: public final Disposable subscribe(Consumer,Consumer)
  // XXX: public final Disposable subscribe(Consumer,Consumer,Action)
  // XXX: public final void subscribe(MaybeObserver)
  // XXX: public final Maybe subscribeOn(Scheduler)
  // XXX: public final MaybeObserver subscribeWith(MaybeObserver)
  // XXX: public final Maybe switchIfEmpty(MaybeSource)
  // XXX: public final Single switchIfEmpty(SingleSource)
  // XXX: public final Maybe takeUntil(MaybeSource)
  // XXX: public final Maybe takeUntil(Publisher)
  // XXX: public final TestObserver test()
  // XXX: public final TestObserver test(boolean)
  // XXX: public final Maybe timeout(long,TimeUnit)
  // XXX: public final Maybe timeout(long,TimeUnit,MaybeSource)
  // XXX: public final Maybe timeout(long,TimeUnit,Scheduler)
  // XXX: public final Maybe timeout(long,TimeUnit,Scheduler,MaybeSource)
  // XXX: public final Maybe timeout(MaybeSource)
  // XXX: public final Maybe timeout(MaybeSource,MaybeSource)
  // XXX: public final Maybe timeout(Publisher)
  // XXX: public final Maybe timeout(Publisher,MaybeSource)
  // XXX: public final Object to(Function)
  // XXX: public final Flowable toFlowable()
  // XXX: public final Observable toObservable()
  // XXX: public final Single toSingle()
  // XXX: public final Single toSingle(Object)
  // XXX: public final Maybe unsubscribeOn(Scheduler)
  // XXX: public final Maybe zipWith(MaybeSource,BiFunction)
}
